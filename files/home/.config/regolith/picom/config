#########################################################################################
#
# Adapted for Regolith from
# https://gist.github.com/vemacs/458d101ad0bfb79ab70792ecb977c40c
#
# ! The EXPERIMENTAL BACKENDS flag is used in i3's configuration
# ! file to make use of the new backends for better performance
# ! and improved rendering.
# 
#########################################################################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#########################################################################################
#
# GLX backend specific
#
#########################################################################################

glx-no-stencil = true;
use-damage = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen
# is modified, but a 20% increase when only 1/4 is. My tests on nouveau show terrible
# slowdown. Useful with --glx-swap-method, as well.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update. My tests on
# nouveau shows a 200% performance boost when only 1/4 of the screen is updated. May
# break VSync and is not available on some drivers. Overrides --glx-copy-from-front.
glx-use-copysubbuffermesa = false;

# GLX backend: Avoid rebinding pixmap on window damage. Probably could improve
# performance on rapid window content changes, but is known to break things on
# some drivers (LLVMpipe). Recommended if it works.
glx-no-rebind-pixmap = true;

# Additionally use X Sync fence to sync clients' draw calls. 
# Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;

#########################################################################################
#
# Rounded Corners
#
#########################################################################################

#  corner-radius = 8.0;
#  rounded-corners-exclude = [
#      "_GTK_FRAME_EXTENTS@:c",
#      "class_g = 'Polybar'"
#  ];

#########################################################################################
#
# Shadows
#
#########################################################################################

# Disable client-side shadows on windows.
shadow = false;

#########################################################################################
#
# Opacity
#
#########################################################################################

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;

inactive-dim = 0.2;
inactive-dim-fixed = false;
blur-background = false;
blur-background-frame = false;
blur-background-fixed = false;

#########################################################################################
#
# Fading
#
#########################################################################################

fading = true;
fade-delta = 6;
fade-in-step = 0.03;
fade-out-step = 0.03;
no-fading-openclose = true;

#########################################################################################
#
# Other
#
#########################################################################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;

# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;

# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of
# using FocusIn/Out events. Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;

# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window
# managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Set VSync.
vsync = true;

# Enable DBE painting mode, intended to use with VSync
# to (hopefully) eliminate tearing. Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost
# performance. This should not be used with --vsync drm/opengl/opengl-oml as
# they essentially does --sw-opti's job already, unless you wish to specify
# a lower refresh rate than the actual value.
sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize
# performance for full-screen windows, like games. Known to cause flickering when
# redirecting/unredirecting windows. paint-on-overlay may make the flickering
# less obvious.
unredir-if-possible = true;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group
# focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group
# focused at the same time. WM_TRANSIENT_FOR has higher priority if
# --detect-transient is enabled, too.
detect-client-leader = true;

# Prevent shadows from drawing across displays.
xinerama-shadow-crop = true;

#########################################################################################
#
# Window type settings
#
#########################################################################################

wintypes:
{
    tooltip =
    {
        fade = true;
        shadow = false;
        opacity = 0.85;
        focus = true;
    };
    popup_menu = { 
        opacity = 1.0; 
        shadow = false;
        fade = false;
    }
    dropdown_menu = { 
        opacity = 1.0; 
        fade = false;
    }
};
